scalar Date
scalar DateTime

type ParameterError {
  field: String!
  error: String!
}

type MutationResponse {
  success: Boolean!
  errors: [ParameterError!]
}
type User {
    userId: Int!
    username: String!
    password: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    reviews: [Review!]!
}

type UserListResponse {
  data: [User!]!
  total: Int!
}

type Restaurant {
    restaurantId: Int!
    name: String!
    address: String!
    cuisine: String!
    averageRating: Float!
    createdAt: DateTime!
    updatedAt: DateTime!
    reviews: [Review!]!
}

type RestaurantListResponse {
  data: [Restaurant!]!
  total: Int!
}

type Review {
    reviewId: Int!
    restaurantId: Int!
    userId: Int!
    rating: Int!
    visitDate: Date!
    comment: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type ReviewListResponse {
  data: [Review!]!
  total: Int!
}
type Query {
  # TODO pull by non-primary key
  getUserById(
    userId: ID!
  ): User

  # TODO include relations, such as getReviewsByUser
  getUser(
    offset: Int = 0,
    limit: Int = 10,
  ): UserListResponse!

  # TODO pull by non-primary key
  getRestaurantById(
    restaurantId: ID!
  ): Restaurant

  # TODO include relations, such as getReviewsByUser
  getRestaurant(
    offset: Int = 0,
    limit: Int = 10,
  ): RestaurantListResponse!

  # TODO pull by non-primary key
  getReviewById(
    reviewId: ID!
  ): Review

  # TODO include relations, such as getReviewsByUser
  getReview(
    offset: Int = 0,
    limit: Int = 10,
  ): ReviewListResponse!
}

type Mutation {
  createUser (
    userId: ID!
    username: String!
    password: String!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  updateUser (
    userId: ID!
    username: String!
    password: String!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  upsertUser (
    userId: ID!
    username: String
    password: String
    createdAt: DateTime
    updatedAt: DateTime
  ): MutationResponse
  
  deleteUser (
    userId: ID!
  ): MutationResponse
  

  createRestaurant (
    restaurantId: ID!
    name: String!
    address: String!
    cuisine: String!
    averageRating: Float!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  updateRestaurant (
    restaurantId: ID!
    name: String!
    address: String!
    cuisine: String!
    averageRating: Float!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  upsertRestaurant (
    restaurantId: ID!
    name: String
    address: String
    cuisine: String
    averageRating: Float
    createdAt: DateTime
    updatedAt: DateTime
  ): MutationResponse
  
  deleteRestaurant (
    restaurantId: ID!
  ): MutationResponse
  

  createReview (
    reviewId: ID!
    restaurantId: Int!
    userId: Int!
    rating: Int!
    visitDate: Date!
    comment: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  updateReview (
    reviewId: ID!
    restaurantId: Int!
    userId: Int!
    rating: Int!
    visitDate: Date!
    comment: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
  ): MutationResponse
  
  upsertReview (
    reviewId: ID!
    restaurantId: Int
    userId: Int
    rating: Int
    visitDate: Date
    comment: Int
    createdAt: DateTime
    updatedAt: DateTime
  ): MutationResponse
  
  deleteReview (
    reviewId: ID!
  ): MutationResponse
  
}
